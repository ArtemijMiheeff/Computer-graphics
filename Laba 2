#include <windows.h>

#include <iostream>

#include <GL/gl.h>
#include <GL/glu.h>
#include "GL/freeglut.h"

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp> 

#include <vector>
#include <cmath>

// используем пространство имен стандартной библиотеки
using namespace glm;

// функция, вызываемая при изменении размеров окна
void reshape(int w, int h)
{
 // установить новую область просмотра, равную всей области окна
 glViewport(0, 0, (GLsizei)w, (GLsizei)h);

 // установить матрицу проекции с правильным аспектом
 glMatrixMode(GL_PROJECTION);
 glLoadIdentity();
 gluPerspective(25.0, (float)w / h, 0.2, 70.0);
};

const std::vector<vec3> color{ vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 1.0), vec3(1.0, 0.0, 0.0), vec3(1.0, 1.0, 0.0), vec3(0.5, 0.0, 1.0) };
//std::vector<vec3> color1 { 1.0, 0.0, 1.0 };

float r = 0.5;
float g = 0.0;
float b = 1.0;

// функция вызывается при перерисовке окна
// в том числе и принудительно, по командам glutPostRedisplay
void display(void)
{
 // отчищаем буфер цвета и буфер глубины
 glClearColor(1.0, 0.88, 0.11, 1.0);
 glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

 // включаем тест глубины
 glEnable(GL_DEPTH_TEST);

 // устанавливаем камеру
 glMatrixMode(GL_MODELVIEW);
 glLoadIdentity();
 gluLookAt(5, 5, 7.5, 0, 0, 0, 0, 1, 0);

 // выводим объект - красный (1,0,0) чайник
 glColor3f(r,g,b);
 glutWireTeapot(1.0);

 // смена переднего и заднего буферов
 glutSwapBuffers();
};
int count_color = 0;
// функция вызывается каждые 20 мс
int counter = 1;
int counter1 = 0;
void simulation(int value)
{
 

 switch (counter)
 {
 case 1:
  //violet -> white
  r = color[4][0] + 0.01 * counter1;
  g = color[4][1] + 0.02 * counter1;
  b = color[4][2] + 0 * counter1;
  //std::cout << r << " " << g << " " << b << std::endl;
  if (counter1 == 50) {
   counter1 = 0;
   counter++;
  }
  counter1++;
  break;
 case 2:
  //white -> blue
  r = color[0][0] - 0.02 * counter1;
  g = color[0][1] - 0.02 * counter1;
  b = color[0][2] + 0 * counter1;

  if (counter1 == 50) {
   counter1 = 0;
   counter++;
  }
  counter1++;
  break;
 case 3:
  //blue -> red
  r = color[1][0] + 0.02 * counter1;
  g = color[1][1] - 0.0 * counter1;
  b = color[1][2] - 0.02 * counter1;

  if (counter1 == 50) {
   counter1 = 0;
   counter++;
  }
  counter1++;
  break;
 case 4:
  //red -> yellow
  r = color[2][0] + 0 * counter1;
  g = color[2][1] + 0.02 * counter1;
  b = color[2][2] - 0 * counter1;

  if (counter1 == 50) {
   counter1 = 0;
   counter++;
  }
  counter1++;
  break;
 case 5:
  //yellow -> violet
  r = color[3][0] - 0.01 * counter1;
  g = color[3][1] - 0.02 * counter1;
  b = color[3][2] + 0.02 * counter1;

  if (counter1 == 50) {
   counter1 = 0;
   counter=1;
  }
  counter1++;
  break;
 }

// if (counter1 == 50)
// {
//  counter1 = 0;
// }

 //counter1 = 0;
 // устанавливаем признак того, что окно нуждается в перерисовке
 glutPostRedisplay();
 // эта же функция будет вызвана еще раз через 20 мс
 glutTimerFunc(20, simulation, 0);
};



// Функция обработки нажатия клавиш
void keyboardFunc(unsigned char key, int x, int y)
{
 switch (counter)
 {
 case 1: 
  r = color[0][0];
  g = 0.0;
  b = 0.0;
  counter++;
  break;
 case 2: 
  r = 0.0;
  g = 1.0;
  b = 0.0; 
  counter++;
  break;
 case 3:
  r = 0.0;
  g = 0.0;
  b = 1.0;
  counter = 1;
  break;
 }

 printf("Key code is %i\n", key);
};

void main(int argc, char** argv)
{
 setlocale(LC_ALL, "ru");

 // инициализация библиотеки GLUT
 glutInit(&argc, argv);
 // инициализация дисплея (формат вывода)
 glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE);

 // СОЗДАНИЕ ОКНА:
 // 1. устанавливаем верхний левый угол окна
 glutInitWindowPosition(200, 200);
 // 2. устанавливаем размер окна
 glutInitWindowSize(800, 600);
 // 3. создаем окно
 glutCreateWindow("Laba_01");

 // УСТАНОВКА ФУНКЦИЙ ОБРАТНОГО ВЫЗОВА
 // устанавливаем функцию, которая будет вызываться для перерисовки окна
 glutDisplayFunc(display);
 // устанавливаем функцию, которая будет вызываться при изменении размеров окна
 glutReshapeFunc(reshape);
 // устанавливаем функцию, которая будет вызвана через 20 мс
 glutTimerFunc(20, simulation, 0);
 // устанавливаем функцию, которая будет вызываться при нажатии на клавишу
 glutKeyboardFunc(keyboardFunc);

 // основной цикл обработки сообщений ОС
 glutMainLoop();
};
